class Solution:

    def permute(self, nums: List[int]) -> List[List[int]]:

        def backtrack(current_permutation, used):

            if len(current_permutation) == len(nums):

                result.append(current_permutation[:])

                return

            for i in range(len(nums)):

                if not used[i]:

                    # Choose

                    used[i] = True

                    current_permutation.append(nums[i])

                    # Explore

                    backtrack(current_permutation, used)

                    # Un-choose (backtrack)

                    used[i] = False

                    current_permutation.pop()

       

        result = []

        used = [False] * len(nums)

        backtrack([], used)

        return result
